<?php
/**
 * Provider
 *
 * PHP version 5
 *
 * @category Class
 * @package  Vericred\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/*
 * Vericred API
 *
 */

/*
 Vericred's API allows you to search for Health Plans that a specific doctor
accepts.

## Getting Started

Visit our [Developer Portal](https://vericred.3scale.net) to
create an account.

Once you have created an account, you can create one Application for
Production and another for our Sandbox (select the appropriate Plan when
you create the Application).

## Authentication

To authenticate, pass the API Key you created in the Developer Portal as
a `Vericred-Api-Key` header.

`curl -H 'Vericred-Api-Key: YOUR_KEY' "https://api.vericred.com/providers?search_term=Foo&zip_code=11215"`

## Versioning

Vericred's API default to the latest version.  However, if you need a specific
version, you can request it with an `Accept-Version` header.

The current version is `v3`.  Previous versions are `v1` and `v2`.

`curl -H 'Vericred-Api-Key: YOUR_KEY' -H 'Accept-Version: v2' "https://api.vericred.com/providers?search_term=Foo&zip_code=11215"`

## Pagination

Endpoints that accept `page` and `per_page` parameters are paginated. They expose
four additional fields that contain data about your position in the response,
namely `Total`, `Per-Page`, `Link`, and `Page` as described in [RFC-5988](https://tools.ietf.org/html/rfc5988).

For example, to display 5 results per page and view the second page of a
`GET` to `/networks`, your final request would be `GET /networks?....page=2&per_page=5`.

## Sideloading

When we return multiple levels of an object graph (e.g. `Provider`s and their `State`s
we sideload the associated data.  In this example, we would provide an Array of
`State`s and a `state_id` for each provider.  This is done primarily to reduce the
payload size since many of the `Provider`s will share a `State`

```
{
  providers: [{ id: 1, state_id: 1}, { id: 2, state_id: 1 }],
  states: [{ id: 1, code: 'NY' }]
}
```

If you need the second level of the object graph, you can just match the
corresponding id.

## Selecting specific data

All endpoints allow you to specify which fields you would like to return.
This allows you to limit the response to contain only the data you need.

For example, let's take a request that returns the following JSON by default

```
{
  provider: {
    id: 1,
    name: 'John',
    phone: '1234567890',
    field_we_dont_care_about: 'value_we_dont_care_about'
  },
  states: [{
    id: 1,
    name: 'New York',
    code: 'NY',
    field_we_dont_care_about: 'value_we_dont_care_about'
  }]
}
```

To limit our results to only return the fields we care about, we specify the
`select` query string parameter for the corresponding fields in the JSON
document.

In this case, we want to select `name` and `phone` from the `provider` key,
so we would add the parameters `select=provider.name,provider.phone`.
We also want the `name` and `code` from the `states` key, so we would
add the parameters `select=states.name,staes.code`.  The id field of
each document is always returned whether or not it is requested.

Our final request would be `GET /providers/12345?select=provider.name,provider.phone,states.name,states.code`

The response would be

```
{
  provider: {
    id: 1,
    name: 'John',
    phone: '1234567890'
  },
  states: [{
    id: 1,
    name: 'New York',
    code: 'NY'
  }]
}
```


*/


/* OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Provider Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Vericred\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Provider implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Provider';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'accepting_change_of_payor_patients' => 'bool',
        'accepting_medicaid_patients' => 'bool',
        'accepting_medicare_patients' => 'bool',
        'accepting_private_patients' => 'bool',
        'accepting_referral_patients' => 'bool',
        'city' => 'string',
        'email' => 'string',
        'gender' => 'string',
        'first_name' => 'string',
        'hios_ids' => 'string[]',
        'id' => 'int',
        'last_name' => 'string',
        'latitude' => 'float',
        'longitude' => 'float',
        'middle_name' => 'string',
        'network_ids' => 'int[]',
        'personal_phone' => 'string',
        'phone' => 'string',
        'presentation_name' => 'string',
        'specialty' => 'string',
        'state' => 'string',
        'state_id' => 'int',
        'street_line_1' => 'string',
        'street_line_2' => 'string',
        'suffix' => 'string',
        'title' => 'string',
        'type' => 'string',
        'zip_code' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'accepting_change_of_payor_patients' => 'accepting_change_of_payor_patients',
        'accepting_medicaid_patients' => 'accepting_medicaid_patients',
        'accepting_medicare_patients' => 'accepting_medicare_patients',
        'accepting_private_patients' => 'accepting_private_patients',
        'accepting_referral_patients' => 'accepting_referral_patients',
        'city' => 'city',
        'email' => 'email',
        'gender' => 'gender',
        'first_name' => 'first_name',
        'hios_ids' => 'hios_ids',
        'id' => 'id',
        'last_name' => 'last_name',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'middle_name' => 'middle_name',
        'network_ids' => 'network_ids',
        'personal_phone' => 'personal_phone',
        'phone' => 'phone',
        'presentation_name' => 'presentation_name',
        'specialty' => 'specialty',
        'state' => 'state',
        'state_id' => 'state_id',
        'street_line_1' => 'street_line_1',
        'street_line_2' => 'street_line_2',
        'suffix' => 'suffix',
        'title' => 'title',
        'type' => 'type',
        'zip_code' => 'zip_code'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'accepting_change_of_payor_patients' => 'setAcceptingChangeOfPayorPatients',
        'accepting_medicaid_patients' => 'setAcceptingMedicaidPatients',
        'accepting_medicare_patients' => 'setAcceptingMedicarePatients',
        'accepting_private_patients' => 'setAcceptingPrivatePatients',
        'accepting_referral_patients' => 'setAcceptingReferralPatients',
        'city' => 'setCity',
        'email' => 'setEmail',
        'gender' => 'setGender',
        'first_name' => 'setFirstName',
        'hios_ids' => 'setHiosIds',
        'id' => 'setId',
        'last_name' => 'setLastName',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'middle_name' => 'setMiddleName',
        'network_ids' => 'setNetworkIds',
        'personal_phone' => 'setPersonalPhone',
        'phone' => 'setPhone',
        'presentation_name' => 'setPresentationName',
        'specialty' => 'setSpecialty',
        'state' => 'setState',
        'state_id' => 'setStateId',
        'street_line_1' => 'setStreetLine1',
        'street_line_2' => 'setStreetLine2',
        'suffix' => 'setSuffix',
        'title' => 'setTitle',
        'type' => 'setType',
        'zip_code' => 'setZipCode'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'accepting_change_of_payor_patients' => 'getAcceptingChangeOfPayorPatients',
        'accepting_medicaid_patients' => 'getAcceptingMedicaidPatients',
        'accepting_medicare_patients' => 'getAcceptingMedicarePatients',
        'accepting_private_patients' => 'getAcceptingPrivatePatients',
        'accepting_referral_patients' => 'getAcceptingReferralPatients',
        'city' => 'getCity',
        'email' => 'getEmail',
        'gender' => 'getGender',
        'first_name' => 'getFirstName',
        'hios_ids' => 'getHiosIds',
        'id' => 'getId',
        'last_name' => 'getLastName',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'middle_name' => 'getMiddleName',
        'network_ids' => 'getNetworkIds',
        'personal_phone' => 'getPersonalPhone',
        'phone' => 'getPhone',
        'presentation_name' => 'getPresentationName',
        'specialty' => 'getSpecialty',
        'state' => 'getState',
        'state_id' => 'getStateId',
        'street_line_1' => 'getStreetLine1',
        'street_line_2' => 'getStreetLine2',
        'suffix' => 'getSuffix',
        'title' => 'getTitle',
        'type' => 'getType',
        'zip_code' => 'getZipCode'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accepting_change_of_payor_patients'] = isset($data['accepting_change_of_payor_patients']) ? $data['accepting_change_of_payor_patients'] : null;
        $this->container['accepting_medicaid_patients'] = isset($data['accepting_medicaid_patients']) ? $data['accepting_medicaid_patients'] : null;
        $this->container['accepting_medicare_patients'] = isset($data['accepting_medicare_patients']) ? $data['accepting_medicare_patients'] : null;
        $this->container['accepting_private_patients'] = isset($data['accepting_private_patients']) ? $data['accepting_private_patients'] : null;
        $this->container['accepting_referral_patients'] = isset($data['accepting_referral_patients']) ? $data['accepting_referral_patients'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['hios_ids'] = isset($data['hios_ids']) ? $data['hios_ids'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['latitude'] = isset($data['latitude']) ? $data['latitude'] : null;
        $this->container['longitude'] = isset($data['longitude']) ? $data['longitude'] : null;
        $this->container['middle_name'] = isset($data['middle_name']) ? $data['middle_name'] : null;
        $this->container['network_ids'] = isset($data['network_ids']) ? $data['network_ids'] : null;
        $this->container['personal_phone'] = isset($data['personal_phone']) ? $data['personal_phone'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['presentation_name'] = isset($data['presentation_name']) ? $data['presentation_name'] : null;
        $this->container['specialty'] = isset($data['specialty']) ? $data['specialty'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['state_id'] = isset($data['state_id']) ? $data['state_id'] : null;
        $this->container['street_line_1'] = isset($data['street_line_1']) ? $data['street_line_1'] : null;
        $this->container['street_line_2'] = isset($data['street_line_2']) ? $data['street_line_2'] : null;
        $this->container['suffix'] = isset($data['suffix']) ? $data['suffix'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['zip_code'] = isset($data['zip_code']) ? $data['zip_code'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets accepting_change_of_payor_patients
     * @return bool
     */
    public function getAcceptingChangeOfPayorPatients()
    {
        return $this->container['accepting_change_of_payor_patients'];
    }

    /**
     * Sets accepting_change_of_payor_patients
     * @param bool $accepting_change_of_payor_patients Is this provider accepting patients with a change of insurance?
     * @return $this
     */
    public function setAcceptingChangeOfPayorPatients($accepting_change_of_payor_patients)
    {
        $this->container['accepting_change_of_payor_patients'] = $accepting_change_of_payor_patients;

        return $this;
    }

    /**
     * Gets accepting_medicaid_patients
     * @return bool
     */
    public function getAcceptingMedicaidPatients()
    {
        return $this->container['accepting_medicaid_patients'];
    }

    /**
     * Sets accepting_medicaid_patients
     * @param bool $accepting_medicaid_patients Is this provider accepting new Medicaid patients?
     * @return $this
     */
    public function setAcceptingMedicaidPatients($accepting_medicaid_patients)
    {
        $this->container['accepting_medicaid_patients'] = $accepting_medicaid_patients;

        return $this;
    }

    /**
     * Gets accepting_medicare_patients
     * @return bool
     */
    public function getAcceptingMedicarePatients()
    {
        return $this->container['accepting_medicare_patients'];
    }

    /**
     * Sets accepting_medicare_patients
     * @param bool $accepting_medicare_patients Is this provider accepting new Medicare patients?
     * @return $this
     */
    public function setAcceptingMedicarePatients($accepting_medicare_patients)
    {
        $this->container['accepting_medicare_patients'] = $accepting_medicare_patients;

        return $this;
    }

    /**
     * Gets accepting_private_patients
     * @return bool
     */
    public function getAcceptingPrivatePatients()
    {
        return $this->container['accepting_private_patients'];
    }

    /**
     * Sets accepting_private_patients
     * @param bool $accepting_private_patients Is this provider accepting new patients with private insurance?
     * @return $this
     */
    public function setAcceptingPrivatePatients($accepting_private_patients)
    {
        $this->container['accepting_private_patients'] = $accepting_private_patients;

        return $this;
    }

    /**
     * Gets accepting_referral_patients
     * @return bool
     */
    public function getAcceptingReferralPatients()
    {
        return $this->container['accepting_referral_patients'];
    }

    /**
     * Sets accepting_referral_patients
     * @param bool $accepting_referral_patients Is this provider accepting new patients via referrals?
     * @return $this
     */
    public function setAcceptingReferralPatients($accepting_referral_patients)
    {
        $this->container['accepting_referral_patients'] = $accepting_referral_patients;

        return $this;
    }

    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city City name (e.g. Springfield).
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email Primary email address to contact the provider.
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets gender
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     * @param string $gender Provider's gender (M or F)
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name Given name for the provider.
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets hios_ids
     * @return string[]
     */
    public function getHiosIds()
    {
        return $this->container['hios_ids'];
    }

    /**
     * Sets hios_ids
     * @param string[] $hios_ids List of HIOS ids for this provider
     * @return $this
     */
    public function setHiosIds($hios_ids)
    {
        $this->container['hios_ids'] = $hios_ids;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id National Provider Index (NPI) number
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name Family name for the provider.
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets latitude
     * @return float
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     * @param float $latitude Latitude of provider
     * @return $this
     */
    public function setLatitude($latitude)
    {
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     * @return float
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     * @param float $longitude Longitude of provider
     * @return $this
     */
    public function setLongitude($longitude)
    {
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets middle_name
     * @return string
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     * @param string $middle_name Middle name for the provider.
     * @return $this
     */
    public function setMiddleName($middle_name)
    {
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets network_ids
     * @return int[]
     */
    public function getNetworkIds()
    {
        return $this->container['network_ids'];
    }

    /**
     * Sets network_ids
     * @param int[] $network_ids Array of network ids
     * @return $this
     */
    public function setNetworkIds($network_ids)
    {
        $this->container['network_ids'] = $network_ids;

        return $this;
    }

    /**
     * Gets personal_phone
     * @return string
     */
    public function getPersonalPhone()
    {
        return $this->container['personal_phone'];
    }

    /**
     * Sets personal_phone
     * @param string $personal_phone Personal contact phone for the provider.
     * @return $this
     */
    public function setPersonalPhone($personal_phone)
    {
        $this->container['personal_phone'] = $personal_phone;

        return $this;
    }

    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     * @param string $phone Office phone for the provider
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets presentation_name
     * @return string
     */
    public function getPresentationName()
    {
        return $this->container['presentation_name'];
    }

    /**
     * Sets presentation_name
     * @param string $presentation_name Preferred name for display (e.g. Dr. Francis White may prefer Dr. Frank White)
     * @return $this
     */
    public function setPresentationName($presentation_name)
    {
        $this->container['presentation_name'] = $presentation_name;

        return $this;
    }

    /**
     * Gets specialty
     * @return string
     */
    public function getSpecialty()
    {
        return $this->container['specialty'];
    }

    /**
     * Sets specialty
     * @param string $specialty Name of the primary Specialty
     * @return $this
     */
    public function setSpecialty($specialty)
    {
        $this->container['specialty'] = $specialty;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state State code for the provider's address (e.g. NY).
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets state_id
     * @return int
     */
    public function getStateId()
    {
        return $this->container['state_id'];
    }

    /**
     * Sets state_id
     * @param int $state_id Foreign key to States
     * @return $this
     */
    public function setStateId($state_id)
    {
        $this->container['state_id'] = $state_id;

        return $this;
    }

    /**
     * Gets street_line_1
     * @return string
     */
    public function getStreetLine1()
    {
        return $this->container['street_line_1'];
    }

    /**
     * Sets street_line_1
     * @param string $street_line_1 First line of the provider's street address.
     * @return $this
     */
    public function setStreetLine1($street_line_1)
    {
        $this->container['street_line_1'] = $street_line_1;

        return $this;
    }

    /**
     * Gets street_line_2
     * @return string
     */
    public function getStreetLine2()
    {
        return $this->container['street_line_2'];
    }

    /**
     * Sets street_line_2
     * @param string $street_line_2 Second line of the provider's street address.
     * @return $this
     */
    public function setStreetLine2($street_line_2)
    {
        $this->container['street_line_2'] = $street_line_2;

        return $this;
    }

    /**
     * Gets suffix
     * @return string
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     * @param string $suffix Suffix for the provider's name (e.g. Jr)
     * @return $this
     */
    public function setSuffix($suffix)
    {
        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title Professional title for the provider (e.g. Dr).
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Type of NPI number (individual provider vs organization).
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets zip_code
     * @return string
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     * @param string $zip_code Postal code for the provider's address (e.g. 11215)
     * @return $this
     */
    public function setZipCode($zip_code)
    {
        $this->container['zip_code'] = $zip_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Vericred\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Vericred\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


