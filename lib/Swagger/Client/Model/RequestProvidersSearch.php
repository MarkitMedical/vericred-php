<?php
/**
 * RequestProvidersSearch
 *
 * PHP version 5
 *
 * @category Class
 * @package  Vericred\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * RequestProvidersSearch Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Vericred\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RequestProvidersSearch implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    static $swaggerModelName = 'RequestProvidersSearch';

    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'accepts_insurance' => 'bool',
        'hios_ids' => 'string[]',
        'page' => 'int',
        'per_page' => 'int',
        'radius' => 'int',
        'search_term' => 'string',
        'zip_code' => 'string',
        'type' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'accepts_insurance' => 'accepts_insurance',
        'hios_ids' => 'hios_ids',
        'page' => 'page',
        'per_page' => 'per_page',
        'radius' => 'radius',
        'search_term' => 'search_term',
        'zip_code' => 'zip_code',
        'type' => 'type'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'accepts_insurance' => 'setAcceptsInsurance',
        'hios_ids' => 'setHiosIds',
        'page' => 'setPage',
        'per_page' => 'setPerPage',
        'radius' => 'setRadius',
        'search_term' => 'setSearchTerm',
        'zip_code' => 'setZipCode',
        'type' => 'setType'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'accepts_insurance' => 'getAcceptsInsurance',
        'hios_ids' => 'getHiosIds',
        'page' => 'getPage',
        'per_page' => 'getPerPage',
        'radius' => 'getRadius',
        'search_term' => 'getSearchTerm',
        'zip_code' => 'getZipCode',
        'type' => 'getType'
    );
  
    static function getters() {
        return self::$getters;
    }

    /**
      * $accepts_insurance Limit results to Providers who accept at least one insurance
        plan.  Note that the inverse of this filter is not supported and
        any value will evaluate to true
      * @var bool
      */
    protected $accepts_insurance;
    /**
      * $hios_ids List of HIOS ids
      * @var string[]
      */
    protected $hios_ids;
    /**
      * $page Page number
      * @var int
      */
    protected $page;
    /**
      * $per_page Number of records to return per page
      * @var int
      */
    protected $per_page;
    /**
      * $radius Radius (in miles) to use to limit results
      * @var int
      */
    protected $radius;
    /**
      * $search_term String to search by
      * @var string
      */
    protected $search_term;
    /**
      * $zip_code Zip Code to search near
      * @var string
      */
    protected $zip_code;
    /**
      * $type Either organization or individual
      * @var string
      */
    protected $type;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        
        if ($data != null) {
            $this->accepts_insurance = $data["accepts_insurance"];
            $this->hios_ids = $data["hios_ids"];
            $this->page = $data["page"];
            $this->per_page = $data["per_page"];
            $this->radius = $data["radius"];
            $this->search_term = $data["search_term"];
            $this->zip_code = $data["zip_code"];
            $this->type = $data["type"];
        }
    }
    /**
     * Gets accepts_insurance
     * @return bool
     */
    public function getAcceptsInsurance()
    {
        return $this->accepts_insurance;
    }
  
    /**
     * Sets accepts_insurance
     * @param bool $accepts_insurance Limit results to Providers who accept at least one insurance
        plan.  Note that the inverse of this filter is not supported and
        any value will evaluate to true
     * @return $this
     */
    public function setAcceptsInsurance($accepts_insurance)
    {
        
        $this->accepts_insurance = $accepts_insurance;
        return $this;
    }
    /**
     * Gets hios_ids
     * @return string[]
     */
    public function getHiosIds()
    {
        return $this->hios_ids;
    }
  
    /**
     * Sets hios_ids
     * @param string[] $hios_ids List of HIOS ids
     * @return $this
     */
    public function setHiosIds($hios_ids)
    {
        
        $this->hios_ids = $hios_ids;
        return $this;
    }
    /**
     * Gets page
     * @return int
     */
    public function getPage()
    {
        return $this->page;
    }
  
    /**
     * Sets page
     * @param int $page Page number
     * @return $this
     */
    public function setPage($page)
    {
        
        $this->page = $page;
        return $this;
    }
    /**
     * Gets per_page
     * @return int
     */
    public function getPerPage()
    {
        return $this->per_page;
    }
  
    /**
     * Sets per_page
     * @param int $per_page Number of records to return per page
     * @return $this
     */
    public function setPerPage($per_page)
    {
        
        $this->per_page = $per_page;
        return $this;
    }
    /**
     * Gets radius
     * @return int
     */
    public function getRadius()
    {
        return $this->radius;
    }
  
    /**
     * Sets radius
     * @param int $radius Radius (in miles) to use to limit results
     * @return $this
     */
    public function setRadius($radius)
    {
        
        $this->radius = $radius;
        return $this;
    }
    /**
     * Gets search_term
     * @return string
     */
    public function getSearchTerm()
    {
        return $this->search_term;
    }
  
    /**
     * Sets search_term
     * @param string $search_term String to search by
     * @return $this
     */
    public function setSearchTerm($search_term)
    {
        
        $this->search_term = $search_term;
        return $this;
    }
    /**
     * Gets zip_code
     * @return string
     */
    public function getZipCode()
    {
        return $this->zip_code;
    }
  
    /**
     * Sets zip_code
     * @param string $zip_code Zip Code to search near
     * @return $this
     */
    public function setZipCode($zip_code)
    {
        
        $this->zip_code = $zip_code;
        return $this;
    }
    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }
  
    /**
     * Sets type
     * @param string $type Either organization or individual
     * @return $this
     */
    public function setType($type)
    {
        
        $this->type = $type;
        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Vericred\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Vericred\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
